{"ast":null,"code":"var _jsxFileName = \"/Users/lijiajia/Desktop/hooks/hooks/src/basic/useEffect.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Effect() {\n  _s();\n\n  const [count, setCount] = useState(0); //它在第一次渲染之后和每次更新之后都会执行\n  // Similar to componentDidMount and componentDidUpdate:\n\n  useEffect(() => {\n    // Update the document title using the browser API\n    document.title = `You clicked ${count} times`;\n  }, [1]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"You clicked \", count, \" times\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount(count + 1),\n      children: \"Click me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n} // import React, { useState, useEffect } from 'react';\n// export default function FriendStatus(props) {\n//   const [isOnline, setIsOnline] = useState(null);\n//   useEffect(() => {\n//     function handleStatusChange(status) {\n//       setIsOnline(status.isOnline);\n//     }\n//     ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n//     // Specify how to clean up after this effect:\n//     return function cleanup() {\n//       ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n//     };\n//   });\n//   if (isOnline === null) {\n//     return 'Loading...';\n//   }\n//   return isOnline ? 'Online' : 'Offline';\n// }\n\n_s(Effect, \"/xL7qdScToREtqzbt5GZ1kHtYjQ=\");\n\n_c = Effect;\n\nvar _c;\n\n$RefreshReg$(_c, \"Effect\");","map":{"version":3,"sources":["/Users/lijiajia/Desktop/hooks/hooks/src/basic/useEffect.js"],"names":["React","useState","useEffect","Effect","count","setCount","document","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAC/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,CAAD,CAAlC,CAD+B,CAG/B;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACAI,IAAAA,QAAQ,CAACC,KAAT,GAAkB,eAAcH,KAAM,QAAtC;AACD,GAHQ,EAGP,CAAC,CAAD,CAHO,CAAT;AAKA,sBACE;AAAA,4BACE;AAAA,iCAAgBA,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAE,MAAMC,QAAQ,CAACD,KAAK,GAAG,CAAT,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,C,CAGD;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;GAzCwBD,M;;KAAAA,M","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nexport default function Effect() {\n  const [count, setCount] = useState(0);\n  \n  //它在第一次渲染之后和每次更新之后都会执行\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n    // Update the document title using the browser API\n    document.title = `You clicked ${count} times`;\n  },[1]);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\n\n// import React, { useState, useEffect } from 'react';\n\n// export default function FriendStatus(props) {\n//   const [isOnline, setIsOnline] = useState(null);\n\n//   useEffect(() => {\n//     function handleStatusChange(status) {\n//       setIsOnline(status.isOnline);\n//     }\n//     ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n//     // Specify how to clean up after this effect:\n//     return function cleanup() {\n//       ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n//     };\n//   });\n\n//   if (isOnline === null) {\n//     return 'Loading...';\n//   }\n//   return isOnline ? 'Online' : 'Offline';\n// }"]},"metadata":{},"sourceType":"module"}