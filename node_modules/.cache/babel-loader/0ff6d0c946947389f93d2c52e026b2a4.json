{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import React, { useState, useEffect } from 'react';\n// export default function Effect() {\n//   const [count, setCount] = useState(0);\n//   //它在第一次渲染之后和每次更新之后都会执行\n//   // Similar to componentDidMount and componentDidUpdate:\n//   useEffect(() => {\n//     // Update the document title using the browser API\n//     document.title = `You clicked ${count} times`;\n//   });\n//   return (\n//     <div>\n//       <p>You clicked {count} times</p>\n//       <button onClick={() => setCount(count + 1)}>\n//         Click me\n//       </button>\n//     </div>\n//   );\n// }\nimport React, { useState, useEffect } from 'react';\nexport default function FriendStatus(props) {\n  _s();\n\n  const [isOnline, setIsOnline] = useState(null);\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange); // Specify how to clean up after this effect:\n\n    return function cleanup() {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n\n  return isOnline ? 'Online' : 'Offline';\n}\n\n_s(FriendStatus, \"HLSnnfJYDaeB5hXQTNbVZdmJwXQ=\");\n\n_c = FriendStatus;\n\nvar _c;\n\n$RefreshReg$(_c, \"FriendStatus\");","map":{"version":3,"sources":["/Users/lijiajia/Desktop/hooks/hooks/src/basic/useEffect.js"],"names":["React","useState","useEffect","FriendStatus","props","isOnline","setIsOnline","handleStatusChange","status","ChatAPI","subscribeToFriendStatus","friend","id","cleanup","unsubscribeFromFriendStatus"],"mappings":";;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AAC1C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,IAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,aAASK,kBAAT,CAA4BC,MAA5B,EAAoC;AAClCF,MAAAA,WAAW,CAACE,MAAM,CAACH,QAAR,CAAX;AACD;;AACDI,IAAAA,OAAO,CAACC,uBAAR,CAAgCN,KAAK,CAACO,MAAN,CAAaC,EAA7C,EAAiDL,kBAAjD,EAJc,CAKd;;AACA,WAAO,SAASM,OAAT,GAAmB;AACxBJ,MAAAA,OAAO,CAACK,2BAAR,CAAoCV,KAAK,CAACO,MAAN,CAAaC,EAAjD,EAAqDL,kBAArD;AACD,KAFD;AAGD,GATQ,CAAT;;AAWA,MAAIF,QAAQ,KAAK,IAAjB,EAAuB;AACrB,WAAO,YAAP;AACD;;AACD,SAAOA,QAAQ,GAAG,QAAH,GAAc,SAA7B;AACD;;GAlBuBF,Y;;KAAAA,Y","sourcesContent":["// import React, { useState, useEffect } from 'react';\n\n// export default function Effect() {\n//   const [count, setCount] = useState(0);\n  \n//   //它在第一次渲染之后和每次更新之后都会执行\n//   // Similar to componentDidMount and componentDidUpdate:\n//   useEffect(() => {\n//     // Update the document title using the browser API\n//     document.title = `You clicked ${count} times`;\n//   });\n\n//   return (\n//     <div>\n//       <p>You clicked {count} times</p>\n//       <button onClick={() => setCount(count + 1)}>\n//         Click me\n//       </button>\n//     </div>\n//   );\n// }\n\n\nimport React, { useState, useEffect } from 'react';\n\nexport default function FriendStatus(props) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}"]},"metadata":{},"sourceType":"module"}