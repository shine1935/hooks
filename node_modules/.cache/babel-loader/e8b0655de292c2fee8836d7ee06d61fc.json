{"ast":null,"code":"var _jsxFileName = \"/Users/lijiajia/private2021/hooks/src/basic/useEffect.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // export default function Effect() {\n//   const [count, setCount] = useState(0);\n//   //它在第一次渲染之后和每次更新之后都会执行\n//   // Similar to componentDidMount and componentDidUpdate:\n//   useEffect(() => {\n//     // Update the document title using the browser API\n//     document.title = `You clicked ${count} times`;\n//   },[1,2]);\n//   return (\n//     <div>\n//       <p>You clicked {count} times</p>\n//       <button onClick={() => setCount(count + 1)}>\n//         Click me\n//       </button>\n//     </div>\n//   );\n// }\n\n/**\n * 1.react hooks的依赖项目可以按照数据类型分为基本数据类型和引用数据类型，\n * 当为基本数据类型时useEffect可以根据依赖项的变化而去发生改变，\n * 当为引用数据类型时，useeffect总是会被触发，因为useEffect这里进行的时浅比较\n */\n//eg:\n// import React, { useState, useEffect } from 'react';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Example() {\n  _s();\n\n  const [count, setCount] = useState({});\n  useEffect(() => {\n    setCount({\n      test: \"count是一个对象，使得页面死循环\"\n    });\n  }, [count]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"You clicked \", count, \" times\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount(count + 1),\n      children: \"Click me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n/**\n * 清除effect副作用\n */\n// import React, { useState, useEffect } from 'react';\n// function useInterval(callback, time) {\n//     useEffect(() => {\n//         const I = setInterval(callback, time);\n//         return () => {\n//             clearInterval()\n//         }\n//     }, [])//基本类型、引用类型、Map、Error？？？？？\n// }\n// export default function Effect() {\n//     const [count, setCount] = useState(0);\n//     useInterval(() => {\n//         setCount(count => count + 1);\n//     }, 1000)\n//     return (\n//         <div>\n//             <p>You clicked {count} times</p>\n//             <button onClick={() => setCount(count + 1)}>\n//                 Click me\n//       </button>\n//         </div>\n//     );\n// }\n\n_s(Example, \"KH5vNaxQgcotsGCHHQ7+13gaLbM=\");\n\n_c = Example;\n\nvar _c;\n\n$RefreshReg$(_c, \"Example\");","map":{"version":3,"sources":["/Users/lijiajia/private2021/hooks/src/basic/useEffect.js"],"names":["React","useState","useEffect","Example","count","setCount","test"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAChC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACfG,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAC;AAAN,KAAD,CAAR;AACA,GAFQ,EAEP,CAACF,KAAD,CAFO,CAAT;AAIA,sBACE;AAAA,4BACE;AAAA,iCAAgBA,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAE,MAAMC,QAAQ,CAACD,KAAK,GAAG,CAAT,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;AAED;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAhDwBD,O;;KAAAA,O","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// export default function Effect() {\n//   const [count, setCount] = useState(0);\n\n//   //它在第一次渲染之后和每次更新之后都会执行\n//   // Similar to componentDidMount and componentDidUpdate:\n//   useEffect(() => {\n//     // Update the document title using the browser API\n//     document.title = `You clicked ${count} times`;\n//   },[1,2]);\n\n//   return (\n//     <div>\n//       <p>You clicked {count} times</p>\n//       <button onClick={() => setCount(count + 1)}>\n//         Click me\n//       </button>\n//     </div>\n//   );\n// }\n\n\n/**\n * 1.react hooks的依赖项目可以按照数据类型分为基本数据类型和引用数据类型，\n * 当为基本数据类型时useEffect可以根据依赖项的变化而去发生改变，\n * 当为引用数据类型时，useeffect总是会被触发，因为useEffect这里进行的时浅比较\n */\n\n//eg:\n// import React, { useState, useEffect } from 'react';\n\nexport default function Example() {\n  const [count, setCount] = useState({});\n\n  useEffect(() => {\n   setCount({test:\"count是一个对象，使得页面死循环\"})\n  },[count]);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\n/**\n * 清除effect副作用\n */\n\n// import React, { useState, useEffect } from 'react';\n\n\n// function useInterval(callback, time) {\n//     useEffect(() => {\n//         const I = setInterval(callback, time);\n//         return () => {\n//             clearInterval()\n//         }\n//     }, [])//基本类型、引用类型、Map、Error？？？？？\n\n// }\n// export default function Effect() {\n//     const [count, setCount] = useState(0);\n\n//     useInterval(() => {\n//         setCount(count => count + 1);\n//     }, 1000)\n\n//     return (\n//         <div>\n//             <p>You clicked {count} times</p>\n//             <button onClick={() => setCount(count + 1)}>\n//                 Click me\n//       </button>\n//         </div>\n//     );\n// }\n\n\n"]},"metadata":{},"sourceType":"module"}