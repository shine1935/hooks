{"ast":null,"code":"var _jsxFileName = \"/Users/lijiajia/Desktop/hooks/hooks/src/basic/useContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst themes = {\n  light: {\n    foreground: \"#000000\",\n    background: \"#eeeeee\"\n  },\n  dark: {\n    foreground: \"#ffffff\",\n    background: \"#222222\"\n  }\n};\nconst ThemeContext = /*#__PURE__*/React.createContext(themes.light);\nexport default function AppContext() {\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme: themes,\n      toggle: () => {\n        setTheme(theme => {\n          setTheme(theme === themes.light ? themes.dark : themes.light);\n        });\n      }\n    },\n    children: /*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n_c = AppContext;\n\nfunction Toolbar(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ThemedButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = Toolbar;\n\nfunction ThemedButton() {\n  _s();\n\n  const theme = useContext(ThemeContext);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    style: {\n      background: theme.background,\n      color: theme.foreground\n    },\n    onClick: theme.toggle(),\n    children: \"I am styled by theme context!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ThemedButton, \"+C1P7ukOg/azcV4AZ819oyezFOE=\");\n\n_c3 = ThemedButton;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AppContext\");\n$RefreshReg$(_c2, \"Toolbar\");\n$RefreshReg$(_c3, \"ThemedButton\");","map":{"version":3,"sources":["/Users/lijiajia/Desktop/hooks/hooks/src/basic/useContext.js"],"names":["React","useContext","themes","light","foreground","background","dark","ThemeContext","createContext","AppContext","theme","toggle","setTheme","Toolbar","props","ThemedButton","color"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,UAAU,EAAE,SADP;AAELC,IAAAA,UAAU,EAAE;AAFP,GADM;AAKbC,EAAAA,IAAI,EAAE;AACJF,IAAAA,UAAU,EAAE,SADR;AAEJC,IAAAA,UAAU,EAAE;AAFR;AALO,CAAf;AAWA,MAAME,YAAY,gBAAGP,KAAK,CAACQ,aAAN,CAAoBN,MAAM,CAACC,KAA3B,CAArB;AAEA,eAAe,SAASM,UAAT,GAAsB;AACnC,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAC1BC,MAAAA,KAAK,EAACR,MADoB;AAE1BS,MAAAA,MAAM,EAAC,MAAI;AACPC,QAAAA,QAAQ,CAACF,KAAK,IAAE;AACZE,UAAAA,QAAQ,CAACF,KAAK,KAAGR,MAAM,CAACC,KAAf,GAAqBD,MAAM,CAACI,IAA5B,GAAiCJ,MAAM,CAACC,KAAzC,CAAR;AACH,SAFO,CAAR;AAGH;AANyB,KAA9B;AAAA,2BASE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;KAduBM,U;;AAgBxB,SAASI,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,sBACE;AAAA,2BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;MANQD,O;;AAQT,SAASE,YAAT,GAAwB;AAAA;;AACtB,QAAML,KAAK,GAAGT,UAAU,CAACM,YAAD,CAAxB;AACA,sBACE;AAAQ,IAAA,KAAK,EAAE;AAAEF,MAAAA,UAAU,EAAEK,KAAK,CAACL,UAApB;AAAgCW,MAAAA,KAAK,EAAEN,KAAK,CAACN;AAA7C,KAAf;AAA0E,IAAA,OAAO,EAAEM,KAAK,CAACC,MAAN,EAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAPQI,Y;;MAAAA,Y","sourcesContent":["import React, { useContext } from 'react';\n\nconst themes = {\n  light: {\n    foreground: \"#000000\",\n    background: \"#eeeeee\"\n  },\n  dark: {\n    foreground: \"#ffffff\",\n    background: \"#222222\"\n  }\n};\n\nconst ThemeContext = React.createContext(themes.light);\n\nexport default function AppContext() {\n  return (\n    <ThemeContext.Provider value={{\n        theme:themes,\n        toggle:()=>{\n            setTheme(theme=>{\n                setTheme(theme===themes.light?themes.dark:themes.light)\n            })\n        }\n\n    }}>\n      <Toolbar />\n    </ThemeContext.Provider>\n  );\n}\n\nfunction Toolbar(props) {\n  return (\n    <div>\n      <ThemedButton />\n    </div>\n  );\n}\n\nfunction ThemedButton() {\n  const theme = useContext(ThemeContext);\n  return (\n    <button style={{ background: theme.background, color: theme.foreground }} onClick={theme.toggle()}>\n      I am styled by theme context!\n    </button>\n  );\n}"]},"metadata":{},"sourceType":"module"}