{"ast":null,"code":"/**\n * 缓存界面上常用，但是不常改变的东西\n * V=f(state,props) useHooks...\n * 想在f中new Object();只创建一次\n * 一些复杂计算在状态改变后才做\n */\n\n/**\n * 缓存一个函数(useCallback)\n * 缓存一个值(useMemo)\n */\n//深拷贝和浅拷贝(缓存策略？？？)\n//tips:可以使用useMemo减少重绘次数\n// import React, { useMemo, useState } from 'react'\n// export default function useMemoExample() {\n//     const [count, setCount] = useState(0);\n//     const memorizedText = useMemo(() => {\n//         return `第一次进入组件的时间为:${Date.now()}`\n//     }, [Math.floor(count/10)]);//每增加10，变化一次\n//     return (\n//         <div>\n//             {memorizedText}\n//             <p>点击了：{count}次</p>\n//             <button onClick={() => {setCount(count => count + 1) }}>点我增加</button>\n//         </div>\n//     )\n// }\n// useMemo(()=>{\n// })","map":{"version":3,"sources":["/Users/lijiajia/Desktop/hooks/hooks/src/extra/useMemo.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA","sourcesContent":["/**\n * 缓存界面上常用，但是不常改变的东西\n * V=f(state,props) useHooks...\n * 想在f中new Object();只创建一次\n * 一些复杂计算在状态改变后才做\n */\n\n/**\n * 缓存一个函数(useCallback)\n * 缓存一个值(useMemo)\n */\n\n\n//深拷贝和浅拷贝(缓存策略？？？)\n//tips:可以使用useMemo减少重绘次数\n// import React, { useMemo, useState } from 'react'\n\n// export default function useMemoExample() {\n\n//     const [count, setCount] = useState(0);\n//     const memorizedText = useMemo(() => {\n//         return `第一次进入组件的时间为:${Date.now()}`\n//     }, [Math.floor(count/10)]);//每增加10，变化一次\n\n//     return (\n//         <div>\n//             {memorizedText}\n//             <p>点击了：{count}次</p>\n//             <button onClick={() => {setCount(count => count + 1) }}>点我增加</button>\n//         </div>\n//     )\n\n// }\n\n\n// useMemo(()=>{\n    \n// })\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}